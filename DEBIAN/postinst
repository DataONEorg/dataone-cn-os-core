#!/bin/bash

LONG_DATE=`date +%Y%m%d%H%M%S`

TOMCAT=tomcat6
TOMCAT_USER=tomcat6
DATAONE_USER=tomcat6
TOMCAT_HOME=/var/lib/tomcat6
SOURCE_DIR=/usr/share/dataone-cn-os-core
SCRIPT_DIR=${SOURCE_DIR}/debian
APACHE_CONF=/etc/apache2
MOD_JK_CONF=/etc/libapache2-mod-jk
SITES="cn cn-ssl"
LDAP_CONF=/etc/ldap
LDAP_USER=openldap
CILOGON_CERTS="cilogon-basic.pem cilogon-silver.pem cilogon-openid.pem"
CA_CERT_DIR=/var/local/dataone/ca
SSL_CERT_DIR=/etc/ssl/certs
##################################################################
# Install the dataone private key provided by the user
# This key can not be added to the SVN repository because it is not
# secure to do so -- access to the file must be restricted
##################################################################
KEY_FILE=${HOME}/dataone_org.key
KEY_DIR=/etc/ssl/private/
if [ -e ${KEY_FILE} ]
then
    echo "Copying private key: ${KEY_FILE}."
    cp ${KEY_FILE} ${KEY_DIR}
else
    echo "Key file is missing.  Please provide it as ${KEY_FILE}. Without
    this, SSL will not function properly."
fi
echo "Completed configuration of private keys."

echo "Start configuration of public CA store"
if [ ! -d ${CA_CERT_DIR} ]
then
	mkdir ${CA_CERT_DIR}
	chdir 750 ${CA_CERT_DIR}
	chown -R ${TOMCAT_USER}.${TOMCAT_USER} ${CA_CERT_DIR}
fi

for CA_CERT in ${CILOGON_CERTS}
do
# make a link in CA_CERT_DIR from the /etc/ssl/cert/{CA_CERT} file for the 
# cacert's hash
	CA_HASH=`openssl x509 -noout -hash -in ${SSL_CERT_DIR}/${CA_CERT}`

	#symlink the hash value in CA_CERT_DIR back to actual cert in SSL_CERT_DIR
	ln -s ${SSL_CERT_DIR}/${CA_CERT} ${CA_CERT_DIR}/${CA_HASH}.0
done
echo "Completed configuration of public CA store"

###############################################################################
# Configure Apache
###############################################################################

## Stop apache
echo "Stopping Apache"
/etc/init.d/apache2 stop

## make certain we have a directory for the JKMount directives of our apps
if [ ! -d ${APACHE_CONF}/jk_mount ]
then
	mkdir ${APACHE_CONF}/jk_mount
	chdir 750 ${APACHE_CONF}/jk_mount
fi

## copy in jk.conf file
if [ -e ${APACHE_CONF}/mods-available/jk.conf ]
then 
  JK_CONF_DIFF=`diff ${SCRIPT_DIR}/jk.conf ${APACHE_CONF}/mods-available/jk.conf`
  if [ "${JK_CONF_DIFF}" != "" ]
  then
    echo "Backing up ${APACHE_CONF}/mods-available/jk.conf to ${APACHE_CONF}/mods-available/jk.conf.${LONG_DATE}"
    mv ${APACHE_CONF}/mods-available/jk.conf ${APACHE_CONF}/mods-available/jk.conf.${LONG_DATE}
  fi
fi
echo "Copying jk.conf to ${APACHE_CONF}/mods-available/"
cp ${SCRIPT_DIR}/jk.conf ${APACHE_CONF}/mods-available/

## copy in workers.properties file for mod-jk
if [ -e ${MOD_JK_CONF}/workers.properties ]
then 
  WORKERS_PROPS_DIFF=`diff ${SCRIPT_DIR}/workers.properties ${MOD_JK_CONF}/workers.properties`
  if [ "${WORKERS_PROPS_DIFF}" != "" ]
  then
    echo "Backing up ${MOD_JK_CONF}/workers.properties to ${MOD_JK_CONF}/workers.properties.${LONG_DATE}"
    mv ${MOD_JK_CONF}/workers.properties ${MOD_JK_CONF}/workers.properties.${LONG_DATE}
  fi
fi
echo "Copying workers.properties to ${MOD_JK_CONF}/"
cp ${SCRIPT_DIR}/workers.properties ${MOD_JK_CONF}/

## copy in site configuration files
for SITE in ${SITES}
do
    if [ -e ${APACHE_CONF}/sites-available/${SITE} ]
    then 
      SITE_DIFF=`diff ${SCRIPT_DIR}/${SITE} ${APACHE_CONF}/sites-available/${SITE}`
      if [ "${SITE_DIFF}" != "" ]
      then
        echo "Backing up ${APACHE_CONF}/sites-available/${SITE} to ${APACHE_CONF}/sites-available/${SITE}.${LONG_DATE}"
        mv ${APACHE_CONF}/sites-available/${SITE} ${APACHE_CONF}/sites-available/${SITE}.${LONG_DATE}
      fi
    fi
    echo "Copying ${SITE} site file to ${APACHE_CONF}/sites-available/"
    cp ${SCRIPT_DIR}/${SITE} ${APACHE_CONF}/sites-available/
    ## replace the token HOSTNAME in the site file to a hostname beginning with cn in the /etc/hosts file
    # HOSTNAME=`perl -nle 'if (/^([\d\.]+)\s+(cn[^\s]+)\s*/) {$hostname= $2;} END{print $hostname}' /etc/hosts`
    
    ## replace the token HOSTNAME in the site file to a hostname as found by issuing a hostname -f
    HOSTNAME=`/bin/hostname -f`
    if [ "$HOSTNAME" != "" ]
    then
      sed -i.bak  's/SERVER_NAME/'${HOSTNAME}'/' ${APACHE_CONF}/sites-available/${SITE}
    else
      echo "HOSTNAME can not be set in ${APACHE_CONF}/sites-available/${SITE}"
    fi
    ## enable ${SITE} site
    echo "Enabling ${SITE} site"
    a2dissite ${SITE}
    a2ensite ${SITE}
done

# Turn on the ssl module
echo "Refreshing Mod SSL"
a2dismod ssl
a2enmod ssl

## disable and then re-enable mod jk to pick up changes
echo "Refreshing Mod JK"
a2dismod jk
a2enmod jk


## disable the default apache site, which gets in the way of the other sites
a2dissite 000-default
## Start Apache
/etc/init.d/apache2 start

## Stop tomcat
echo "Stopping Tomcat"
/etc/init.d/${TOMCAT} stop

## copy in jk.conf file
if [ -e ${TOMCAT_HOME}/conf/server.xml ]
then 
  JK_CONF_DIFF=`diff ${SCRIPT_DIR}/server.xml ${TOMCAT_HOME}/conf/server.xml`
  if [ "${JK_CONF_DIFF}" != "" ]
  then
    echo "Backing up ${TOMCAT_HOME}/conf/server.xml to ${TOMCAT_HOME}/conf/server.xml.${LONG_DATE}"
    mv ${TOMCAT_HOME}/conf/server.xml ${TOMCAT_HOME}/conf/server.xml.${LONG_DATE}
  fi
fi
echo "Copying server.xml to ${TOMCAT_HOME}/conf/"
cp ${SCRIPT_DIR}/server.xml ${TOMCAT_HOME}/conf/


# add slash-handling properties to catalina.properties file
# (tomcat doesn't support include, so need to add it to the main file)
if [ -e ${TOMCAT_HOME}/conf/catalina.properties ]
then
	CONTAINS_ENCODED_SLASH=`grep 'ALLOW_ENCODED_SLASH' ${TOMCAT_HOME}/conf/catalina.properties`
    if [ "$CONTAINS_ENCODED_SLASH" == "" ]
	then
		cp ${TOMCAT_HOME}/conf/catalina.properties ${TOMCAT_HOME}/conf/catalina.properties.${LONG_DATE}
		echo Appending slash-handling Java system properties to  ${TOMCAT_HOME}/conf/catalina.properties
		echo >> ${TOMCAT_HOME}/conf/catalina.properties
        echo \# Dataone configuration for handling encoded slash and backslashes >> ${TOMCAT_HOME}/conf/catalina.properties
        echo org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true >> ${TOMCAT_HOME}/conf/catalina.properties
        echo org.apache.catalina.connector.CoyoteAdapter.ALLOW_BACKSLASH=true >> ${TOMCAT_HOME}/conf/catalina.properties
    fi
fi

chown -R ${TOMCAT_USER}.${TOMCAT_USER} /etc/tomcat6
chown -R ${TOMCAT_USER}.${TOMCAT_USER} /var/lib/tomcat6
chown -R ${TOMCAT_USER}.${TOMCAT_USER} /var/log/tomcat6
chown -R ${TOMCAT_USER}.${TOMCAT_USER} /var/cache/tomcat6
chown -R ${TOMCAT_USER}.${TOMCAT_USER} /usr/share/tomcat6

if [ -e "/var/log/dataone" ]
then
  echo "/var/log/dataone already exists"
else
  mkdir /var/log/dataone
fi

chown -R ${DATAONE_USER}.${DATAONE_USER} /var/log/dataone
chown -R ${DATAONE_USER}.${DATAONE_USER} /var/lib/dataone


###############################################################################
# Configure OpenLDAP
###############################################################################
# Only populate LDAP on first run, otherwise migrate
POPULATE=0
MIGRATE=0
## place schema extension
if [ -e ${LDAP_CONF}/schema/dataone.schema ]
then 
  SCHEMA_DIFF=`diff ${SCRIPT_DIR}/ldap/dataone.schema ${LDAP_CONF}/schema/dataone.schema`
  if [ "${SCHEMA_DIFF}" != "" ]
  then
  	MIGRATE=1
    echo "Schema changing: Run the pre migration script"
    ${SCRIPT_DIR}/ldap/prepareMigrateLdap.pl
    echo "Backing up ${LDAP_CONF}/schema/dataone.schema to ${LDAP_CONF}/schema/dataone.schema.${LONG_DATE}"
    mv ${LDAP_CONF}/schema/dataone.schema ${LDAP_CONF}/schema/dataone.schema.${LONG_DATE}
  fi
else
	POPULATE=1
fi
echo "Copying dataone.schema to ${LDAP_CONF}/schema/"
cp ${SCRIPT_DIR}/ldap/dataone.schema ${LDAP_CONF}/schema/

## place slapd.conf template
if [ -e ${LDAP_CONF}/slapd.conf ]
then 
  SLAPD_DIFF=`diff ${SCRIPT_DIR}/ldap/slapd.conf ${LDAP_CONF}/slapd.conf`
  if [ "${SLAPD_DIFF}" != "" ]
  then
    echo "Backing up ${LDAP_CONF}/slapd.conf to ${LDAP_CONF}/slapd.conf.${LONG_DATE}"
    mv ${LDAP_CONF}/slapd.conf ${LDAP_CONF}/slapd.conf.${LONG_DATE}
  fi
fi
echo "Copying slapd.conf to ${LDAP_CONF}/"
cp ${SCRIPT_DIR}/ldap/slapd.conf ${LDAP_CONF}/

## TODO: configure the file with correct values (passwords)
echo "YOU MUST EDIT THE CONFIGURATION FILE: ${LDAP_CONF}/slapd.conf"

## set permissions 
chown -R ${LDAP_USER}.${LDAP_USER} ${LDAP_CONF}/slapd.conf
chown -R ${LDAP_USER}.${LDAP_USER} ${LDAP_CONF}/schema/dataone.schema 

## stop the default service
echo "Stoping slapd"
/etc/init.d/slapd stop

## start, using slapd.conf file
echo "Generating ldif config using: ${LDAP_CONF}/slapd.conf"
#slapd -h 'ldap:/// ldapi:///' -g openldap -u openldap -f /etc/ldap/slapd.conf

rm -rf /etc/ldap/slapd.d/*
slaptest -f /etc/ldap/slapd.conf -F /etc/ldap/slapd.d
chown -R openldap.openldap /etc/ldap/slapd.d

echo "Starting slapd"
/etc/init.d/slapd start

## add the root entry
# XXX NOTE: we need to determine what environment this is being executed in, currently it only works in DEVELOPMENT environment
#      we need a way to switch which nodeList file we load
if [ ${POPULATE} > 0 ]
then
	echo "Adding all entries"
	ldapadd -D cn=admin,dc=dataone,dc=org -W -H ldap://localhost:389 -x -f ${SCRIPT_DIR}/ldap/org.ldif
	ldapadd -D cn=admin,dc=dataone,dc=org -W -H ldap://localhost:389 -x -f ${SCRIPT_DIR}/ldap/dataone.ldif
	ldapadd -D cn=admin,dc=dataone,dc=org -W -H ldap://localhost:389 -x -f ${SCRIPT_DIR}/ldap/cilogon.ldif
	ldapadd -c -D cn=admin,dc=dataone,dc=org -W -H ldap://localhost:389 -x -f ${SCRIPT_DIR}/ldap/devNodeList.ldif
fi
if [ ${MIGRATE] > 0 ]
then
	${SCRIPT_DIR}/ldap/migrateLdap.pl
fi
## list the entries
echo "Listing LDAP entries for: dc=dataone,dc=org"
ldapsearch -LLL -D cn=admin,dc=dataone,dc=org -W -H ldap://localhost:389 -x -b 'dc=dataone,dc=org'		

## done with OpenLDAP
echo "LDAP configuration complete"

echo "ETC configuration"
## replace the token NODEIDENTIFIER in the properties file to a nodeId as deduced from this perl script
# XXX NOTE: we need to determine what environment this is being executed in, currently it only works in DEVELOPMENT environment
#   this is due to the needing to determine which ldif file 
sleep 5

NODEIDENTIFIER=`/usr/bin/perl  /usr/share/dataone-cn-os-core/debian/getD1NodeId.pl`
if [ "$NODEIDENTIFIER" != "ERROR" ]
then
	sed -i.bak  's/\(cn\.nodeId\=\)NODEIDENTIFIER/\1'${NODEIDENTIFIER}'/;' /etc/dataone/node.properties
	rm /etc/dataone/node.properties.bak
else
	echo "ERROR: NODE ID can not be set in /etc/dataone/node.properties cn.nodeId must be manually set"
fi
## Start Tomcat
echo "starting Tomcat server"

/etc/init.d/${TOMCAT} start
######################################
echo "Configuration of OS complete."

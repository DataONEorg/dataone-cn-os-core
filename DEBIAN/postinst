#!/bin/bash -x

# source the debconf library
if [ -e "/usr/share/debconf/confmodule" ]; then
    . /usr/share/debconf/confmodule
else
    echo "debconf must be installed. Exiting."
    exit 1
fi

# Reminder: don't echo to stdout, it messes up debconf

LONG_DATE=$(date +%Y%m%d%H%M%S)

TOMCAT=tomcat6
TOMCAT_USER=tomcat6
DATAONE_USER=tomcat6
TOMCAT_HOME=/var/lib/tomcat6
SOURCE_DIR=/usr/share/dataone-cn-os-core
SCRIPT_DIR=${SOURCE_DIR}/debian
APACHE_CONF=/etc/apache2
MOD_JK_CONF=/etc/libapache2-mod-jk
D1_CONF=/etc/dataone
LDAP_CONF=/etc/ldap
SSL_SITE=cn-ssl
JAVA_SECURITY=/usr/lib/jvm/java-6-sun/jre/lib/security/java.security
JAVA_SECURITY_EXT=/usr/lib/jvm/java-6-sun/jre/lib/ext
LDAP_USER=openldap
CILOGON_CERTS="cilogon-basic.pem cilogon-silver.pem cilogon-openid.pem dataone-ca.crt"
CA_CERT_DIR=/var/local/dataone/ca
SSL_CERT_DIR=/etc/ssl/certs
D1_LOG_DIR=/var/log/dataone
if [ ! -e ${D1_LOG_DIR} ]; then
    mkdir -p ${D1_LOG_DIR}
fi

##################################################################
# Create a difficult to guess token to pass for Solr auth
##################################################################
SOLR_TOKEN=`date +%m%s%Y%N%d | sed 's/0//g'`

##################################################################
# Set up logging for background processes
##################################################################
if [ ! -e "/var/log/dataone" ]; then
	mkdir  -p /var/log/dataone
	chown tomcat6.tomcat6 /var/log/dataone
fi

# functions to echo to STDERR or the install log instead of STDOUT
logError () {
    echo -e "$@" 1>&2
}

log () {
    echo -e "$@" >> ${D1_LOG_DIR}/dataone-cn-os-core.install.log
}

# Fetch the cn.context.label from the debconf database and set the per-environment variables
db_get dataone-cn-os-core/cn.context.label
CONTEXT=${RET}
    
##################################################################
# Set the context of the deployment (DEV, STAGE, SANDBOX, PRODUCTION)
##################################################################
db_get dataone-cn-os-core/cn.installed # check if this is a new install
if [[ "${RET}" == "" ]]; then

    CONTEXT_LABEL="cn.context.label"
    NODE_PROPS="$D1_CONF/node.properties"
    
    if [ -e ${NODE_PROPS} ]; then
        sed -i.bak "s/\(${CONTEXT_LABEL} *=\).*/\1${CONTEXT}/" ${NODE_PROPS}
    else
        log "The file ${NODE_PROPS} must be in place to proceed."
        exit 1;
    fi
    
    # set the properties associated with this context
    IPLIST_LABEL="cn.iplist"
    
    if [ -e ${NODE_PROPS} ]; then
        # Fetch the context's ip list from the debconf database
        IPLIST="127.0.0.1"
        # if the cn.openldap.synchronized is false then the 
        # CN will be running in standalone mode
        # no synchronization, no other hazelcast cluster members
        
        db_get dataone-cn-os-core/cn.openldap.synchronized
        SYNCHRONIZED=${RET}
        
        if [ ${SYNCHRONIZED} != "false" ];then
        	db_get dataone-cn-os-core/${IPLIST_LABEL}
        	IPLIST=${RET}
        fi
        sed -i.bak "s/\(${IPLIST_LABEL} *=\).*/\1${IPLIST}/" ${NODE_PROPS}
    else
        log "Couldn't set the IP list correctly."
    fi
    
    NODEIDS_LABEL="cn.nodeIds"
    
    if [ -e ${NODE_PROPS} ]; then
        # Fetch the context's node id list from the debconf database
        db_get dataone-cn-os-core/cn.nodeids
        sed -i.bak "s/\(${NODEIDS_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
    else
        log "Couldn't set the node id list correctly."
    fi
    
    NODEID_LABEL="cn.nodeId"
    
    if [ -e ${NODE_PROPS} ]; then
        # Fetch the context's node id from the debconf database
        db_get dataone-cn-os-core/cn.nodeid
        sed -i.bak "s/\(${NODEID_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
    else
        log "Couldn't set the node id correctly."
    fi
 
    NODE_RR_LABEL="cn.router.nodeId"
    
    if [ -e ${NODE_PROPS} ]; then
        # Fetch the context's node round robin id from the debconf database
        db_get dataone-cn-os-core/cn.router.nodeId
        sed -i.bak "s/\(${NODE_RR_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
    else
        log "Couldn't set the round robin node id correctly."
    fi
    
    NODE_RR_HOSTNAME="cn.router.hostname"
    
    if [ -e ${NODE_PROPS} ]; then
        # Fetch the context's node round robin hostname from the debconf database
        db_get dataone-cn-os-core/cn.router.hostname
        sed -i.bak "s/\(${NODE_RR_HOSTNAME} *=\).*/\1${RET}/" ${NODE_PROPS}
    else
        log "Couldn't set the round robin hostname correctly."
    fi
    
    log "Start configuration of DataONE CN client certificate"

    db_get dataone-cn-os-core/cn.client.certificate.filepath
    CERT_FILE=${RET}
    CERT_DIR=/etc/dataone/client/certs
    if [ ${CERT_FILE} != "false" ] && [ -e ${CERT_FILE} ];then
        if [[ "${CERT_FILE}" == ${CERT_DIR}* ]]; then
            log "No need to copy certificate file, it's already in place."
        else
            log "Copying certificate file: ${CERT_FILE}."
            cp ${CERT_FILE} ${CERT_DIR}
            log "Completed configuration of CN client certificate file."
        fi
        # get the filename from end of the path and assign it to cn.client.certificate.filename
        certFilename=$(basename $CERT_FILE)
        db_set dataone-cn-os-core/cn.client.certificate.filename $certFilename
    else
    	if [ ${CERT_FILE} != "false" ]; then
            log "Client cert file is missing.  Please provide it as ${CERT_FILE}. 
            Without this, SSL will not function properly."
        fi
    fi
    
    
    CLIENTCERT_FILENAME_LABEL="D1Client.certificate.filename"
    db_get dataone-cn-os-core/cn.client.certificate.filename
    CLIENTCERT_FILENAME=${RET}
    if [ ${CLIENTCERT_FILENAME} != "false" ] && [ -e ${NODE_PROPS} ]; then
        # Fetch the context's node id from the debconf database
        db_get dataone-cn-os-core/cn.client.certificate.filename
        sed -i.bak "s/\(${CLIENTCERT_FILENAME_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
    else
        log "Client cert filename is missing. Must set ${CLIENTCERT_FILENAME_LABEL} 
          in ${NODE_PROPS} for SSL to function properly"
    fi
    
 
    sed -i.bak "s/SOLRTOKEN/${SOLR_TOKEN}/" ${NODE_PROPS}

else
    log "Upgrading the package. No configuration properties reset."
fi

##################################################################
# Install the dataone private key provided by the user
# This key can not be added to the SVN repository because it is not
# secure to do so -- access to the file must be restricted
##################################################################
db_get dataone-cn-os-core/cn.installed # check if this is a new install
if [[ "${RET}" == "" ]]; then
    
    log "Start configuration of DataONE private key"
    
    db_get dataone-cn-os-core/cn.server.privatekey.filepath
    KEY_FILE=${RET}
    KEY_DIR=/etc/ssl/private/
    if [ -e ${KEY_FILE} ];then
        if [[ "${KEY_FILE}" == ${KEY_DIR}* ]]; then
            log "No need to copy key file, it's already in place."
        else
            log "Copying private key: ${KEY_FILE}."
            cp ${KEY_FILE} ${KEY_DIR}
            log "Completed configuration of DataONE private key."
        fi
    else
        log "Key file is missing.  Please provide it as ${KEY_FILE}. Without
        this, SSL will not function properly."
    fi

    
    log "Start configuration of public CA store"
    
    if [ ! -d ${CA_CERT_DIR} ]; then
        mkdir -p ${CA_CERT_DIR}
        chmod 750 ${CA_CERT_DIR}
        chown -R ${TOMCAT_USER}:${TOMCAT_USER} ${CA_CERT_DIR}
    fi
    
    for CA_CERT in ${CILOGON_CERTS}
        do
            # make a link in CA_CERT_DIR from the /etc/ssl/cert/{CA_CERT} 
            # file for the cacert's hash
            CA_HASH=$(openssl x509 -noout -hash -in ${SSL_CERT_DIR}/${CA_CERT})
            
            #symlink the hash value in CA_CERT_DIR back to actual cert in SSL_CERT_DIR
            ln -s ${SSL_CERT_DIR}/${CA_CERT} ${CA_CERT_DIR}/${CA_HASH}.0
        done
        
    log "Completed configuration of public CA store"
else
    log "Upgrading the package. No configuration of public CA store."
fi

###############################################################################
# Configure Apache
###############################################################################

## Stop apache
log "Stopping Apache"
/etc/init.d/apache2 stop

db_get dataone-cn-os-core/cn.installed # check if this is a new install
if [[ "${RET}" == "" ]]; then

    ## make certain we have a directory for the JKMount directives of our apps
    if [ ! -d ${APACHE_CONF}/jk_mount ]; then
    	mkdir -p ${APACHE_CONF}/jk_mount
    	chmod 750 ${APACHE_CONF}/jk_mount
    fi
    
    ## copy in jk.conf file
    if [ -e ${APACHE_CONF}/mods-available/jk.conf ]; then 
        JK_CONF_DIFF=$(diff ${SCRIPT_DIR}/jk.conf ${APACHE_CONF}/mods-available/jk.conf)
        if [ "${JK_CONF_DIFF}" != "" ]; then
            log "Backing up ${APACHE_CONF}/mods-available/jk.conf to ${APACHE_CONF}/mods-available/jk.conf.${LONG_DATE}"
            mv ${APACHE_CONF}/mods-available/jk.conf ${APACHE_CONF}/mods-available/jk.conf.${LONG_DATE}
        fi
    fi
    log "Copying jk.conf to ${APACHE_CONF}/mods-available/"
    cp ${SCRIPT_DIR}/jk.conf ${APACHE_CONF}/mods-available/
    
    ## copy in workers.properties file for mod-jk
    if [ -e ${MOD_JK_CONF}/workers.properties ]; then 
      WORKERS_PROPS_DIFF=$(diff ${SCRIPT_DIR}/workers.properties ${MOD_JK_CONF}/workers.properties)
        if [ "${WORKERS_PROPS_DIFF}" != "" ]; then
            log "Backing up ${MOD_JK_CONF}/workers.properties to ${MOD_JK_CONF}/workers.properties.${LONG_DATE}"
            mv ${MOD_JK_CONF}/workers.properties ${MOD_JK_CONF}/workers.properties.${LONG_DATE}
        fi
    fi
    log "Copying workers.properties to ${MOD_JK_CONF}/"
    cp ${SCRIPT_DIR}/workers.properties ${MOD_JK_CONF}/
    
    ## copy in site configuration files

	if [ -e ${APACHE_CONF}/sites-available/${SSL_SITE} ]
	then 
	  SITE_DIFF=$(diff ${SCRIPT_DIR}/${SSL_SITE} ${APACHE_CONF}/sites-available/${SSL_SITE})
	  if [ "${SITE_DIFF}" != "" ]
	  then
		log "Backing up ${APACHE_CONF}/sites-available/${SSL_SITE} to ${APACHE_CONF}/sites-available/${SSL_SITE}.${LONG_DATE}"
		mv ${APACHE_CONF}/sites-available/${SSL_SITE} ${APACHE_CONF}/sites-available/${SSL_SITE}.${LONG_DATE}
	  fi
	fi
	log "Copying ${SSL_SITE} site file to ${APACHE_CONF}/sites-available/"
	cp ${SCRIPT_DIR}/${SSL_SITE} ${APACHE_CONF}/sites-available/
	## replace the token HOSTNAME in the site file to a hostname beginning with cn in the /etc/hosts file
	# HOSTNAME=$(perl -nle 'if (/^([\d\.]+)\s+(cn[^\s]+)\s*/) {$hostname= $2;} END{print $hostname}' /etc/hosts)
	
	## replace the token HOSTNAME in the site file to a hostname as found by issuing a hostname -f
	HOSTNAME=$(/bin/hostname -f)
	if [ "$HOSTNAME" != "" ]
	then
	  sed -i.bak  's/SERVER_NAME/'${HOSTNAME}'/' ${APACHE_CONF}/sites-available/${SSL_SITE}
	else
	  log "HOSTNAME can not be set in ${APACHE_CONF}/sites-available/${SSL_SITE}"
	fi
	## enable ${SSL_SITE} site
	log "Enabling ${SSL_SITE} site"
	a2dissite ${SSL_SITE}
	a2ensite ${SSL_SITE}


    # be sure mod_proxy and mod_rewrite are enabled
	log "Refreshing Proxy"
	
	a2dismod proxy_ajp
	a2dismod proxy_http
	a2dismod proxy
	
	a2enmod proxy
	a2enmod proxy_http
    a2enmod proxy_ajp
    
	## disable and then re-enable mod rewrite  to pick up changes
	log "Refreshing Rewrite"
	a2dismod rewrite
	a2enmod rewrite

    # Turn on the ssl module
    log "Refreshing Mod SSL"
    a2dismod ssl
    a2enmod ssl
    
    ## disable and then re-enable mod jk to pick up changes
    log "Refreshing Mod JK"
    a2dismod jk
    a2enmod jk
    
    
    ## disable the default apache site, which gets in the way of the other sites
    a2dissite 000-default

else
    log "Upgrading the package. No new configuration of apache needed."
fi

## Start Apache
/etc/init.d/apache2 start

## Stop tomcat
log "Stopping Tomcat"
/etc/init.d/${TOMCAT} stop

db_get dataone-cn-os-core/cn.installed # check if this is a new install
if [[ "${RET}" == "" ]]; then

    # determine if the tomcat init script has a sufficient heap size
    # XXX the below configuration needs to be altered per environment
    
    if [ -e /etc/init.d/tomcat6 ]; then
        CONTAINS_XMX_OPTS=$(egrep 'JAVA_OPTS\=.+\-Xmx' /etc/init.d/tomcat6)
        if [ "${CONTAINS_XMX_OPTS}" == "" ]
        then
            log "THERE WAS AN ERROR /etc/init.d/tomcat NO LONGER HAS -Xmx DEFINED"
            ## -Xmx is not set, that is bad, the tomcat installation must
            ## have change significantly. We must manually add it to the JAVA_OPTS LINE
            ## and then change this script to handle the exact line to add it to
            
        else 
            CONTAINS_MAXPERMSIZE_OPTS=$(egrep 'JAVA_OPTS\=.+\-XX\:MaxPermSize' /etc/init.d/tomcat6)
            if [ "${CONTAINS_MAXPERMSIZE_OPTS}" == "" ]
            then
                ## THE MAIN PROBLEM WITH THIS APPROACH CURRENTLY IS SUPPORTING THE DIFFERENT ENVIRONEMENTS
                ## developer VMs will not be able to support this amount of heap space
                ## in fact our development environment probably can't
                sed -i.bak --regexp-extended 's/(JAVA_OPTS\=)"([^"]+\-Xmx)[0-9]+([^"]*)"/\1"\28192\3 -Xms1024M -XX:MaxPermSize=512M"/;' /etc/init.d/tomcat6
                rm /etc/init.d/tomcat6.bak
            fi
        fi
        CONTAINS_ULIMIT_SETTINGS=$(egrep 'ulimit.+\-Hn' /etc/init.d/tomcat6)
        if [ "${CONTAINS_ULIMIT_SETTINGS}" == "" ]
        then
    		sed -i.bak --regexp-extended 's/^(\#\!\/bin\/sh.*$)/\1\n  ulimit -Hn 16384\n  ulimit -Sn 16384\n/;' /etc/init.d/tomcat6
    		rm /etc/init.d/tomcat6.bak
    	fi
    fi
    
    if [ -e /etc/default/tomcat6 ]; then
    	CONTAINS_USEPARALLEL_OPTS=$(egrep 'JAVA_OPTS\=.+\-XX\:\+UseParallelGC' /etc/default/tomcat6)
        CONTAINS_CONCMARKSWEEP_OPTS=$(egrep '^\#?JAVA_OPTS\=".\{JAVA_OPTS\}.+\-XX\:\+UseConcMarkSweepGC"' /etc/default/tomcat6)
        if [ "${CONTAINS_CONCMARKSWEEP_OPTS}" == "" ]; then
        	if [ "${CONTAINS_USEPARALLEL_OPTS}" == "" ]; then
        		echo "JAVA_OPTS=\"\${JAVA_OPTS} -XX:+UseParallelGC\"" >> /etc/default/tomcat6
        	fi
        else 
            if [ "${CONTAINS_USEPARALLEL_OPTS}" == "" ]; then
                ## THE MAIN PROBLEM WITH THIS APPROACH CURRENTLY IS SUPPORTING THE DIFFERENT ENVIRONEMENTS
                ## developer VMs will not be able to support this amount of heap space
                ## in fact our development environment probably can't
                sed -i.bak --regexp-extended 's/^\#?JAVA_OPTS=\".\{JAVA_OPTS\}.+\-XX\:\+UseConcMarkSweepGC\"/JAVA_OPTS="\$\{JAVA_OPTS\} \-XX\:\+UseParallelGC"/;' /etc/default/tomcat6
                rm /etc/default/tomcat6.bak
            fi
        fi
    fi
    ## copy in jk.conf file
    if [ -e ${TOMCAT_HOME}/conf/server.xml ]; then 
      JK_CONF_DIFF=$(diff ${SCRIPT_DIR}/server.xml ${TOMCAT_HOME}/conf/server.xml)
      if [ "${JK_CONF_DIFF}" != "" ]; then
        log "Backing up ${TOMCAT_HOME}/conf/server.xml to ${TOMCAT_HOME}/conf/server.xml.${LONG_DATE}"
        mv ${TOMCAT_HOME}/conf/server.xml ${TOMCAT_HOME}/conf/server.xml.${LONG_DATE}
      fi
    fi
    log "Copying server.xml to ${TOMCAT_HOME}/conf/"
    cp ${SCRIPT_DIR}/server.xml ${TOMCAT_HOME}/conf/
    
    
    # add slash-handling properties to catalina.properties file
    # (tomcat doesn't support include, so need to add it to the main file)
    if [ -e ${TOMCAT_HOME}/conf/catalina.properties ]; then
    	CONTAINS_ENCODED_SLASH=$(grep 'ALLOW_ENCODED_SLASH' ${TOMCAT_HOME}/conf/catalina.properties)
        if [ "$CONTAINS_ENCODED_SLASH" == "" ]; then
    		
    		cp ${TOMCAT_HOME}/conf/catalina.properties ${TOMCAT_HOME}/conf/catalina.properties.${LONG_DATE}
    		log Appending slash-handling Java system properties to  ${TOMCAT_HOME}/conf/catalina.properties
    		echo >> ${TOMCAT_HOME}/conf/catalina.properties
            echo \# Dataone configuration for handling encoded slash and backslashes >> ${TOMCAT_HOME}/conf/catalina.properties
            echo org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true >> ${TOMCAT_HOME}/conf/catalina.properties
            echo org.apache.catalina.connector.CoyoteAdapter.ALLOW_BACKSLASH=true >> ${TOMCAT_HOME}/conf/catalina.properties
        fi
    fi
    
    chown -R ${TOMCAT_USER}:${TOMCAT_USER} /etc/tomcat6
    chown -R ${TOMCAT_USER}:${TOMCAT_USER} /var/lib/tomcat6
    chown -R ${TOMCAT_USER}:${TOMCAT_USER} /var/log/tomcat6
    chown -R ${TOMCAT_USER}:${TOMCAT_USER} /var/cache/tomcat6
    chown -R ${TOMCAT_USER}:${TOMCAT_USER} /usr/share/tomcat6

else
    log "Upgrading the package. No configuration of public CA store."
fi


###############################################################################
# Configure OpenLDAP
###############################################################################
# Only populate LDAP on first run, otherwise migrate
log "Configuring OpenLDAP"

## place schema extension
db_get dataone-cn-os-core/cn.openldap.populated
POPULATED=${RET}
db_get dataone-cn-os-core/cn.openldap.firstcn
FIRSTCN=${RET}

if [ "${FIRSTCN}" == "true" ]; then
    log "This is the first CN to be installed in the environment"
    
    if [ "${POPULATED}" == "false" ]; then
        log "Populating the LDAP database for the first time"
        sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/cosine.ldif
        sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/nis.ldif
        sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/inetorgperson.ldif

        sudo ldapadd -Y EXTERNAL -H ldapi:/// -f ${SCRIPT_DIR}/ldap/backendDBConfig.ldif
        log "Adding non dataone schema specific entries"
        sudo ldapadd -Y EXTERNAL -H ldapi:/// -f ${SCRIPT_DIR}/ldap/org.ldif
        sudo ldapadd -Y EXTERNAL -H ldapi:/// -f ${SCRIPT_DIR}/ldap/dataone.ldif
        sudo ldapadd -Y EXTERNAL -H ldapi:/// -f ${SCRIPT_DIR}/ldap/cilogon.ldif
        
    else
        log "LDAP database has been populated. Evaluating migration."
        if [ -e ${LDAP_CONF}/schema/dataone.schema ]; then 
            SCHEMA_DIFF=$(diff ${SCRIPT_DIR}/ldap/dataone.schema ${LDAP_CONF}/schema/dataone.schema)
            if [ "${SCHEMA_DIFF}" != "" ]; then
                log "Schema changing: Run the pre migration script"
                ${SCRIPT_DIR}/ldap/prepareMigrateLdap.pl
                log "Backing up ${LDAP_CONF}/schema/dataone.schema to ${LDAP_CONF}/schema/dataone.schema.${LONG_DATE}"
                mv ${LDAP_CONF}/schema/dataone.schema ${LDAP_CONF}/schema/dataone.schema.${LONG_DATE}
            fi
        fi
    fi
else
    log "This is not the first CN to be installed in the environment. Checking LDAP migration."
    if [ -e ${LDAP_CONF}/schema/dataone.schema ]; then 
        SCHEMA_DIFF=$(diff ${SCRIPT_DIR}/ldap/dataone.schema ${LDAP_CONF}/schema/dataone.schema)
        if [ "${SCHEMA_DIFF}" != "" ]; then
            log "Schema changing: Run the pre migration script"
            ${SCRIPT_DIR}/ldap/prepareMigrateLdap.pl
            log "Backing up ${LDAP_CONF}/schema/dataone.schema to ${LDAP_CONF}/schema/dataone.schema.${LONG_DATE}"
            mv ${LDAP_CONF}/schema/dataone.schema ${LDAP_CONF}/schema/dataone.schema.${LONG_DATE}
        fi
    fi
fi

log "Copying dataone.schema to ${LDAP_CONF}/schema/"
cp ${SCRIPT_DIR}/ldap/dataone.schema ${LDAP_CONF}/schema/
chown -R ${LDAP_USER}.${LDAP_USER} ${LDAP_CONF}/schema/dataone.schema 

## place slapd.conf template
if [ -e ${LDAP_CONF}/slapd.conf ]; then 
    SLAPD_DIFF=$(diff ${SCRIPT_DIR}/ldap/slapd.conf ${LDAP_CONF}/slapd.conf)
    if [ "${SLAPD_DIFF}" != "" ]; then
        log "Backing up ${LDAP_CONF}/slapd.conf to ${LDAP_CONF}/slapd.conf.${LONG_DATE}"
        mv ${LDAP_CONF}/slapd.conf ${LDAP_CONF}/slapd.conf.${LONG_DATE}
    fi
fi
log "Copying slapd.conf to ${LDAP_CONF}/"
cp ${SCRIPT_DIR}/ldap/slapd.conf ${LDAP_CONF}/

## Configure the slapd.conf file with correct values
if [ -e ${LDAP_CONF}/slapd.conf ]; then
    # Fetch the ldap rootpw from the debconf database
    db_get dataone-cn-os-core/cn.openldap.password
    LDAP_PASS=${RET}
    sed -i.bak "s/^\(rootpw *\).*/\1           ${LDAP_PASS}/" ${LDAP_CONF}/slapd.conf
    
    db_get dataone-cn-os-core/cn.nodeid
    NODEID=${RET}
    # Set up sychronization across the listed servers
    let count=0
    SYNC_SETTINGS="\n"; # synchronization definitions and settings
    db_get dataone-cn-os-core/cn.openldap.synchronized
    if [ "${RET}" == "true" ]; then
        db_get dataone-cn-os-core/cn.iplist
        ADDRESSES=${RET}
        db_get dataone-cn-os-core/cn.nodeids
        NODEIDS=( ${RET} ) # node ids array
        
        for address in ${ADDRESSES}; 
            do
                # only create a replica entry for servers others than this server
                CURRENTNODEID=${NODEIDS[$count]}
                log "Node id in the list is ${CURRENTNODEID}"
                if [ "${NODEID}" == "${CURRENTNODEID}" ]; then
                    let count=${count}+1
                    continue
                else
                    let count=${count}+1
                    log "Adding LDAP sync config for ${address}"
                    SYNC_SETTINGS="${SYNC_SETTINGS}\nsyncRepl rid=${count}"
                    SYNC_SETTINGS="${SYNC_SETTINGS}\n\tprovider=ldap:\/\/${address}:389"
                    SYNC_SETTINGS="${SYNC_SETTINGS}\n\tbinddn=\"cn=admin,dc=dataone,dc=org\""
                    SYNC_SETTINGS="${SYNC_SETTINGS}\n\tbindmethod=simple"
                    SYNC_SETTINGS="${SYNC_SETTINGS}\n\tcredentials=${LDAP_PASS}"
                    SYNC_SETTINGS="${SYNC_SETTINGS}\n\tsearchbase=\"dc=org\""
                    SYNC_SETTINGS="${SYNC_SETTINGS}\n\ttype=refreshAndPersist"
                    SYNC_SETTINGS="${SYNC_SETTINGS}\n\tinterval=00:00:00:05"
                    SYNC_SETTINGS="${SYNC_SETTINGS}\n\tretry=\"5 5 300 5\""
                    SYNC_SETTINGS="${SYNC_SETTINGS}\n\ttimeout=1"
                fi
            done
            
        SYNC_SETTINGS="${SYNC_SETTINGS}\n\nmirrormode on"
        SYNC_SETTINGS="${SYNC_SETTINGS}\noverlay syncprov"
        SYNC_SETTINGS="${SYNC_SETTINGS}\nsyncprov-checkpoint 100 10"
        SYNC_SETTINGS="${SYNC_SETTINGS}\nsyncprov-sessionlog 100\n"
        
        # Fetch the ldap serverID from the debconf database
        db_get dataone-cn-os-core/cn.openldap.serverID
        SYNC_CONF="${RET}${SYNC_SETTINGS}"
        log ${SYNC_CONF}
        sed -i.bak "s/^\(serverID *\).*/\1${SYNC_CONF}/" ${LDAP_CONF}/slapd.conf
    
    else
        # Fetch the ldap serverID from the debconf database
        db_get dataone-cn-os-core/cn.openldap.serverID
        log "No LDAP replication selected. Setting serverID only."
        sed -i.bak "s/^\(serverID *\).*/\1           ${RET}/" ${LDAP_CONF}/slapd.conf
        
    fi
    
else
    log "Couldn't set LDAP configuration correctly. Configure ${LDAP_CONF}/slapd.conf manually."
fi

# Always clear the cached LDAP password
db_set dataone-cn-os-core/cn.openldap.password "" # clear the cached pw

## set permissions 
chown -R ${LDAP_USER}.${LDAP_USER} ${LDAP_CONF}/slapd.conf

# try to add the dc=org before going through the rest of the routine
# the worst that could happen is a denied message


## stop the default service
log "Stopping slapd"
/etc/init.d/slapd stop

## start, using slapd.conf file
log "Generating ldif config using: ${LDAP_CONF}/slapd.conf"
#slapd -h 'ldap:/// ldapi:///' -g ${LDAP_USER} -u ${LDAP_USER} -f /etc/ldap/slapd.conf

rm -rf ${LDAP_CONF}/slapd.d/*
slaptest -f ${LDAP_CONF}/slapd.conf -F ${LDAP_CONF}/slapd.d
if [ -e ${LDAP_CONF}/slapd.d/cn=config/olcDatabase={1}hdb.ldif ]
then
	 sed -i.bak  's/uri=\"\"//' ${LDAP_CONF}/slapd.d/cn=config/olcDatabase={1}hdb.ldif
	 rm ${LDAP_CONF}/slapd.d/cn=config/olcDatabase={1}hdb.ldif.bak
fi
chown -R ${LDAP_USER}.${LDAP_USER} /etc/ldap/slapd.d

log "Starting slapd"
/etc/init.d/slapd start
sleep 5 # openldap doesn't seem to come up quickly enough

# populate or migrate the LDAP database with the LDIF file for the chosen context
db_get dataone-cn-os-core/cn.openldap.populated
if [ "${RET}" == "false" ]; then
    db_get dataone-cn-os-core/cn.openldap.firstcn
    if [ "${RET}" == "true" ]; then
        log "Adding all dataone schema specific entries"
        LDAPADD_RESULT="$(ldapadd -v -c -D cn=admin,dc=dataone,dc=org -w ${LDAP_PASS} -H ldap://localhost:389 -x -f ${SCRIPT_DIR}/ldap/${CONTEXT,,}NodeList.ldif)"
        log ${LDAPADD_RESULT}
        # Update the debconf database
        db_set dataone-cn-os-core/cn.openldap.populated true
        db_fset dataone-cn-os-core/cn.openldap.populated seen true
    else
        log "Not the first CN in the environment. Skipping LDAP population."
    fi
    
else
    log "Migrating all dataone schema specific entries"
    ${SCRIPT_DIR}/ldap/migrateLdap.pl
fi
## list the entries
log "Listing LDAP entries for: dc=dataone,dc=org"
LDAPSEARCH_RESULT=$(ldapsearch -LLL -D cn=admin,dc=dataone,dc=org -w ${LDAP_PASS} -H ldap://localhost:389 -x -b 'dc=dataone,dc=org')
log ${LDAPSEARCH_RESULT}
## done with OpenLDAP
log "LDAP configuration complete"

log "ETC configuration"

sleep 5

###############################################################################
# Configure BouncyCastle for Java Security (before starting tomcat)
###############################################################################



CONTAINS_BOUNCYCASTLE=$(grep -P '=org\.bouncycastle\.jce\.provider\.BouncyCastleProvider' ${JAVA_SECURITY})

if [ "${CONTAINS_BOUNCYCASTLE}" == "" ]; then

    cp ${SOURCE_DIR}/bcprov-jdk16-1.46.jar ${JAVA_SECURITY_EXT}
    cp ${SOURCE_DIR}/bcmail-jdk16-1.46.jar ${JAVA_SECURITY_EXT}

    SECURITY_PROVIDERS=`grep -P 'security\.provider\.\d' ${JAVA_SECURITY} | awk 'BEGIN { FS = "[.=]" } ; { print $3 }'`
    MAXSECURITY_PROVIDERS=(
    $(for i in ${SECURITY_PROVIDERS[*]}
        do
            echo "$i"
            done | sort -nr )
        )
    MAX_PROVIDER_ORDER=${MAXSECURITY_PROVIDERS[0]}
    BOUNCY_CASTLE_ORDER=`expr ${MAX_PROVIDER_ORDER} + 1`

    BOUNCY_CASTLE_PROVIDER="\nsecurity.provider."${BOUNCY_CASTLE_ORDER}"=org.bouncycastle.jce.provider.BouncyCastleProvider"

    sed -i.bak --regexp-extended "s/(^security\.provider\.${MAX_PROVIDER_ORDER}.+$)/\1${BOUNCY_CASTLE_PROVIDER}/;" ${JAVA_SECURITY}

else
    echo "bouncycastle security provider was previously installed "
fi



###############################################################################
# Start Tomcat
###############################################################################
log "starting Tomcat server"

/etc/init.d/${TOMCAT} start

###############################################################################
# Configure UFW
###############################################################################

db_get dataone-cn-os-core/cn.installed # check if this is a new install
if [[ "${RET}" == "" ]]; then

    #open up the correct port for ldap, ssh, and enable ufw
    db_get dataone-cn-os-core/cn.iplist
    IP_LIST=${RET}
    if [[ "${IP_LIST}" == [1-9]* ]]; then
        for IP in ${IP_LIST}
            do
                ufw allow to any port 389 from ${IP}
                log "Added 'ufw allow to any port 389 from ${IP}' rule"
            done
    fi
    ufw allow ssh # critical for remote management, don't remove
    #ufw enable
else
    log "Upgrading the package.  No firewall rules need to be added."
fi
######################################
db_set dataone-cn-os-core/cn.installed true
db_fset dataone-cn-os-core/cn.installed seen true
db_stop

log "Configuration of dataone-cn-os-core complete."

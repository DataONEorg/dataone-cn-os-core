#!/bin/bash -x

# source the debconf library
if [ -e "/usr/share/debconf/confmodule" ]; then
    . /usr/share/debconf/confmodule
else
    echo "debconf must be installed. Exiting."
    exit 1
fi

# Reminder: don't echo to stdout, it messes up debconf

D1_LOG_DIR=/var/log/dataone
if [ ! -e ${D1_LOG_DIR} ]; then
    mkdir -p ${D1_LOG_DIR}
    chown tomcat6:tomcat6 ${D1_LOG_DIR}
fi

# functions to echo to STDERR or the install log instead of STDOUT
logError () {
    echo -e "$@" 1>&2
}

log () {
    now=$(date "+%Y-%m-%d %H:%M:%S %Z: ")
    echo -e "${now}$@" >> ${D1_LOG_DIR}/dataone-cn-os-core.install.log
}

log "dataone-cn-os-core.postinst called"

ACTION=${1}
NEW_VERSION=${2}

LONG_DATE=$(date +%Y%m%d%H%M%S)

TOMCAT=tomcat6
TOMCAT_USER=tomcat6
DATAONE_USER=tomcat6
TOMCAT_HOME=/var/lib/tomcat6
SOURCE_DIR=/usr/share/dataone-cn-os-core
SCRIPT_DIR=${SOURCE_DIR}/debian
APACHE_CONF=/etc/apache2
MOD_JK_CONF=/etc/libapache2-mod-jk
D1_CONF=/etc/dataone
LDAP_CONF=/etc/ldap
SITES="cn-ssl"
JAVA_SECURITY=/usr/lib/jvm/java-6-sun/jre/lib/security/java.security
JAVA_SECURITY_EXT=/usr/lib/jvm/java-6-sun/jre/lib/ext
JAVA_KEYSTORE=/usr/lib/jvm/java-6-sun/jre/lib/security/cacerts
LDAP_USER=openldap
CILOGON_CERTS="cilogon-basic.pem cilogon-silver.pem cilogon-openid.pem"
CA_CERT_DIR=/var/local/dataone/ca
SSL_CERT_DIR=/etc/ssl/certs
CLIENT_CERT_DIR=/etc/dataone/client/certs
CLIENT_PRIVATE_DIR=/etc/dataone/client/private

HOSTNAME=$(/bin/hostname -f)

# these settings can probably go in the environmental specific 
# properties in /etc/dataone
TESTING_INTERMEDIATE_BUNDLE="geotrust_intermediate.crt"
PROD_INTERMEDIATE_BUNDLE="geotrust_intermediate.crt"
PROD_CERTS="DataONEProductionCA.crt DataONERootCA.crt"
#will update later in script
PUBLIC_SERVER_CERT="tbd"

##################################################################
# Create a difficult to guess token to pass for Solr auth
##################################################################
SOLR_TOKEN=`date +%m%s%Y%N%d | sed 's/0//g'`

case "${ACTION}" in
    abort-remove)
    log "Removal aborted."
    ;;
    abort-upgrade)
    log "Upgrade aborted."
    ;;
    abort-deconfigure)
    log "Deconfigure aborted."
    ;;
    configure)
    log "Configure called."
    
    if [[ $(dpkg -s dataone-cn-os-core | grep Status | cut -d" " -f4) != "installed" ]]; then
    
        # Fetch the cn.context.label from the debconf database and set the per-environment variables
        db_get dataone-cn-os-core/cn.context.label
        CONTEXT=${RET}
            
        ##################################################################
        # Set the context of the deployment (LOCALHOST, DEV, STAGE, SANDBOX, PRODUCTION)
        ##################################################################
        # check if this is a new install
        if [[ $(dpkg -s dataone-cn-os-core | grep Status | cut -d" " -f4) != "installed" ]]; then
        
            CONTEXT_LABEL="cn.context.label"
            NODE_PROPS="$D1_CONF/node.properties"
            
            if [ -e ${NODE_PROPS} ]; then
                sed -i.bak "s/\(${CONTEXT_LABEL} *=\).*/\1${CONTEXT}/" ${NODE_PROPS}
            else
                log "The file ${NODE_PROPS} must be in place to proceed."
                exit 1;
            fi
            
            # set the properties associated with this context
            IPLIST_LABEL="cn.iplist"
            
            if [ -e ${NODE_PROPS} ]; then
                # Fetch the context's ip list from the debconf database
                IPLIST="127.0.0.1"
                # if the cn.openldap.synchronized is false then the 
                # CN will be running in standalone mode
                # no synchronization, no other hazelcast cluster members
                
                db_get dataone-cn-os-core/cn.openldap.synchronized
                SYNCHRONIZED=${RET}
                
                if [[ ${SYNCHRONIZED} != *false* ]];then
                    db_get dataone-cn-os-core/${IPLIST_LABEL}
                    IPLIST=${RET}
                fi
                sed -i.bak "s/\(${IPLIST_LABEL} *=\).*/\1${IPLIST}/" ${NODE_PROPS}
            else
                log "Couldn't set the IP list correctly."
            fi
            
            NODEIDS_LABEL="cn.nodeIds"
            
            if [ -e ${NODE_PROPS} ]; then
                # Fetch the context's node id list from the debconf database
                db_get dataone-cn-os-core/cn.nodeids
                sed -i.bak "s/\(${NODEIDS_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
            else
                log "Couldn't set the node id list correctly."
            fi
            
            NODEID_LABEL="cn.nodeId"
            
            if [ -e ${NODE_PROPS} ]; then
                # Fetch the context's node id from the debconf database
                db_get dataone-cn-os-core/cn.nodeid
                sed -i.bak "s/\(${NODEID_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
            else
                log "Couldn't set the node id correctly."
            fi
         
            NODE_RR_LABEL="cn.router.nodeId"
            
            if [ -e ${NODE_PROPS} ]; then
                # Fetch the context's node round robin id from the debconf database
                db_get dataone-cn-os-core/cn.router.nodeId
                sed -i.bak "s/\(${NODE_RR_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
            else
                log "Couldn't set the round robin node id correctly."
            fi
            
            NODE_RR_HOSTNAME="cn.router.hostname"
            
            if [ -e ${NODE_PROPS} ]; then
                # Fetch the context's node round robin hostname from the debconf database
                db_get dataone-cn-os-core/cn.router.hostname
                sed -i.bak "s/\(${NODE_RR_HOSTNAME} *=\).*/\1${RET}/" ${NODE_PROPS}
            else
                log "Couldn't set the round robin hostname correctly."
            fi
            
            log "Start configuration of DataONE CN client certificate"
        
            db_get dataone-cn-os-core/cn.client.certificate.filepath
            CERT_FILE=${RET}
            if [ ${CERT_FILE} != "false" ] && [ -e ${CERT_FILE} ];then
                if [[ "${CERT_FILE}" == ${CLIENT_PRIVATE_DIR}* ]]; then
                    log "No need to copy certificate file, it's already in place."
                else
                    log "Copying certificate file: ${CERT_FILE}."
                    cp ${CERT_FILE} ${CLIENT_PRIVATE_DIR}
                    log "Completed configuration of CN client certificate file."
                fi
                # get the filename from end of the path and assign it to cn.client.certificate.filename
                certFilename=$(basename $CERT_FILE)
                db_set dataone-cn-os-core/cn.client.certificate.filename $certFilename
            else
                if [ ${CERT_FILE} != "false" ]; then
                    log "Client cert file is missing.  Please provide it as ${CERT_FILE}. 
                    Without this, SSL will not function properly."
                fi
            fi
            
            # set permissions correctly for the certs and private dirs
            chown -R ${TOMCAT_USER}.ssl-cert ${CLIENT_CERT_DIR}            
            chown -R ${TOMCAT_USER}.ssl-cert ${CLIENT_PRIVATE_DIR}
            
            CLIENTCERT_FILENAME_LABEL="D1Client.certificate.filename"
            db_get dataone-cn-os-core/cn.client.certificate.filename
            CLIENTCERT_FILENAME=${RET}
            if [ ${CLIENTCERT_FILENAME} != "false" ] && [ -e ${NODE_PROPS} ]; then
                # Fetch the context's node id from the debconf database
                db_get dataone-cn-os-core/cn.client.certificate.filename
                sed -i.bak "s/\(${CLIENTCERT_FILENAME_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
            else
                log "Client cert filename is missing. Must set ${CLIENTCERT_FILENAME_LABEL} 
                  in ${NODE_PROPS} for SSL to function properly"
            fi
            
            # not convinced we need a global D1Client.CN_URL yet
            # CLIENT_CN_URL="D1Client.CN_URL"
            # HOSTNAME=$(/bin/hostname -f)
            # if [ ${HOSTNAME} != "" ] && [ -e ${NODE_PROPS} ]; then
            #    # use the hostname for the CN_URL
            #    sed -i.bak "s/\(${CLIENT_CN_URL} *=\).*/\1https\:\/\/${HOSTNAME}\/cn/" ${NODE_PROPS}
            # fi

            sed -i.bak "s/SOLRTOKEN/${SOLR_TOKEN}/" ${NODE_PROPS}
            
            # set the FQDN of the machine
            if [ "$HOSTNAME" != "" ]
            then
              sed -i.bak  's/SERVER_NAME/'${HOSTNAME}'/' ${NODE_PROPS}
            else
              log "HOSTNAME can not be set in ${NODE_PROPS}"
            fi
        else
            log "Upgrading the package. No configuration properties reset."
        fi
        
        ##################################################################
        # Install the dataone private key provided by the user
        # This key can not be added to the SVN repository because it is not
        # secure to do so -- access to the file must be restricted
        ##################################################################
        # check if this is a new install
        if [[ $(dpkg -s dataone-cn-os-core | grep Status | cut -d" " -f4) != "installed" ]]; then
            
            log "Start configuration of DataONE private key"
            
            db_get dataone-cn-os-core/cn.server.privatekey.filepath
            KEY_FILE=${RET}
            KEY_DIR=/etc/ssl/private/
            if [ -e ${KEY_FILE} ];then
                if [[ "${KEY_FILE}" == ${KEY_DIR}* ]]; then
                    log "No need to copy key file, it's already in place."
                else
                    log "Copying private key: ${KEY_FILE}."
                    cp ${KEY_FILE} ${KEY_DIR}
                    log "Completed configuration of DataONE private key."
                fi
            else
                log "Key file is missing.  Please provide it as ${KEY_FILE}. Without
                this, SSL will not function properly."
            fi
        
        	# get the DataONE CA
            db_get dataone-cn-os-core/cn.dataone.ca.filename
            DATAONE_CA_FILE=${RET}
            
            # add the DataONE CA to the list
            # this may change if we move to a chainfile for apache
            if [ "${CONTEXT}" == "PRODUCTION" ]; then
            	
            	CILOGON_CERTS="${CILOGON_CERTS} ${PROD_CERTS}"
            else
            	CILOGON_CERTS="${CILOGON_CERTS} ${DATAONE_CA_FILE}"
            fi
            
            log "Start configuration of public CA store"
            
            if [ ! -d ${CA_CERT_DIR} ]; then
                mkdir -p ${CA_CERT_DIR}
                chmod 750 ${CA_CERT_DIR}
                chown -R ${TOMCAT_USER}:${TOMCAT_USER} ${CA_CERT_DIR}
            fi
            
            for CA_CERT in ${CILOGON_CERTS}
                do
                    # make a link in CA_CERT_DIR from the /etc/ssl/cert/{CA_CERT} 
                    # file for the cacert's hash
                    CA_HASH=$(openssl x509 -noout -hash -in ${SSL_CERT_DIR}/${CA_CERT})
                    
                    #symlink the hash value in CA_CERT_DIR back to actual cert in SSL_CERT_DIR
                    ln -s ${SSL_CERT_DIR}/${CA_CERT} ${CA_CERT_DIR}/${CA_HASH}.0
                done
                
            log "Completed configuration of public CA store"
        else
            log "Upgrading the package. No configuration of public CA store."
        fi
        
        ###############################################################################
        # Configure UFW
        ###############################################################################
        
        # check if this is a new install
        if [[ $(dpkg -s dataone-cn-os-core | grep Status | cut -d" " -f4) != "installed" ]]; then
        
            #open up the correct ports
            db_get dataone-cn-os-core/cn.iplist
            IP_LIST=${RET}
            THIS_IP=$(hostname -i)
            THIS_HOST=$(hostname | cut -d"-" -f3)
            # get the correct openvpn p2p ports from the conf files
            #VPN_PORTS=$(grep "^lport" /etc/openvpn/conf/*conf | \
            grep "${CONTEXT,,}.*-${THIS_HOST}" | cut -d" " -f2 | tr "\n" " ")
            if [[ "${IP_LIST}" == [1-9]* ]]; then
                for IP in ${IP_LIST}
                    do
                        if [[ "${IP}" != "${THIS_IP}" ]]; then
                            # ldap syncrepl
                            ufw allow to any port 389 from ${IP}
                            log "Added 'ufw allow to any port 389 from ${IP}' rule"
                            # openvpn ports 
                            #for VPN_PORT in ${VPN_PORTS}
                            #    do
                            #        ufw allow to any port ${VPN_PORT} from ${IP}
                            #        log "Added 'ufw allow to any port ${VPN_PORT} from ${IP}' rule"
                            #    done
                        fi
                    done
            fi
            ufw allow ssh # critical for remote management, don't remove
            ufw allow http
            ufw allow https
            MONITOR_HOST=$(nslookup monitor.dataone.org | grep Add | grep -v '#' | cut -f 2 -d ' ')
            ufw allow from ${MONITOR_HOST} to any port 6556
            #ufw enable
        else
            log "Upgrading the package.  No firewall rules need to be added."
        fi
        
        ###############################################################################
        # Restart OpenVPN after configuration files are in place
        ###############################################################################
        #/etc/init.d/openvpn restart
        
        ###############################################################################
        # Configure Java keystore with GoDaddy and DataONE CA
        ###############################################################################
        # Get the password
        db_get dataone-cn-os-core/cn.keystore.password
        JAVA_KEYSTORE_PASSWORD=${RET}
        if [ "${CONTEXT}" == "PRODUCTION" ]; then
        	keytool -import -noprompt -alias ${PROD_INTERMEDIATE_BUNDLE} -file ${SSL_CERT_DIR}/${PROD_INTERMEDIATE_BUNDLE} -keystore ${JAVA_KEYSTORE} -storepass ${JAVA_KEYSTORE_PASSWORD}
        	log "Adding ${SSL_CERT_DIR}/${PROD_INTERMEDIATE_BUNDLE} to Java keystore: ${JAVA_KEYSTORE}"
        else
            keytool -import -noprompt -alias ${TESTING_INTERMEDIATE_BUNDLE} -file ${SSL_CERT_DIR}/${TESTING_INTERMEDIATE_BUNDLE} -keystore ${JAVA_KEYSTORE} -storepass ${JAVA_KEYSTORE_PASSWORD}
            log "Adding ${SSL_CERT_DIR}/${TESTING_INTERMEDIATE_BUNDLE} to Java keystore: ${JAVA_KEYSTORE}"
        fi
        
        # set the correct public server value for the env
        db_get dataone-cn-os-core/cn.server.publiccert.filepath
		PUBLIC_SERVER_CERT=${RET}
        log "Initial PUBLIC_SERVER_CERT: ${PUBLIC_SERVER_CERT}"
        PUBLIC_SERVER_CERT=$(basename ${PUBLIC_SERVER_CERT})
        log "Final PUBLIC_SERVER_CERT: ${PUBLIC_SERVER_CERT}"
        
        # get the DataONE CA
		db_get dataone-cn-os-core/cn.dataone.ca.filename
		DATAONE_CA_FILE=${RET}
        log "Adding ${SSL_CERT_DIR}/${DATAONE_CA_FILE} to Java keystore: ${JAVA_KEYSTORE}"
        keytool -import -noprompt -alias DataONECA -file ${SSL_CERT_DIR}/${DATAONE_CA_FILE} -keystore ${JAVA_KEYSTORE} -storepass ${JAVA_KEYSTORE_PASSWORD}
        
        # Always clear the cached keystore password
        db_set dataone-cn-os-core/cn.keystore.password "" # clear the cached pw
        
        ###############################################################################
        # Configure Apache
        ###############################################################################
        
        ## Stop apache
        log "Stopping Apache"
        /etc/init.d/apache2 stop
        
        # check if this is a new install
        if [[ $(dpkg -s dataone-cn-os-core | grep Status | cut -d" " -f4) != "installed" ]]; then
        	# copy the correct public server certificate for this environment
            cp ${SCRIPT_DIR}/${PUBLIC_SERVER_CERT} ${SSL_CERT_DIR}/${PUBLIC_SERVER_CERT}
            
            ## change the available port 80 only to localhost
            if [ -e ${APACHE_CONF}/ports.conf ]; then 
                ## has it already been changed?
                CONTAINS_STAR80_PORT=$(egrep 'NameVirtualHost[[:space:]]+\*:80' ${APACHE_CONF}/ports.conf)
                if [ "${CONTAINS_STAR80_PORT}" != "" ]; then
                   sed -i.bak --regexp-extended 's/(NameVirtualHost[[:space:]]+)\*:80/\1127.0.0.1:80/;' ${APACHE_CONF}/ports.conf
                fi
            fi
            ## make certain we have a directory for the JKMount directives of our apps
            if [ ! -d ${APACHE_CONF}/jk_mount ]; then
                mkdir -p ${APACHE_CONF}/jk_mount
                chmod 750 ${APACHE_CONF}/jk_mount
            fi
            
            ## copy in jk.conf file
            if [ -e ${APACHE_CONF}/mods-available/jk.conf ]; then 
                JK_CONF_DIFF=$(diff ${SCRIPT_DIR}/jk.conf ${APACHE_CONF}/mods-available/jk.conf)
                if [ "${JK_CONF_DIFF}" != "" ]; then
                    log "Backing up ${APACHE_CONF}/mods-available/jk.conf to ${APACHE_CONF}/mods-available/jk.conf.${LONG_DATE}"
                    mv ${APACHE_CONF}/mods-available/jk.conf ${APACHE_CONF}/mods-available/jk.conf.${LONG_DATE}
                fi
            fi
            log "Copying jk.conf to ${APACHE_CONF}/mods-available/"
            cp ${SCRIPT_DIR}/jk.conf ${APACHE_CONF}/mods-available/
            
            ## copy in workers.properties file for mod-jk
            if [ -e ${MOD_JK_CONF}/workers.properties ]; then 
              WORKERS_PROPS_DIFF=$(diff ${SCRIPT_DIR}/workers.properties ${MOD_JK_CONF}/workers.properties)
                if [ "${WORKERS_PROPS_DIFF}" != "" ]; then
                    log "Backing up ${MOD_JK_CONF}/workers.properties to ${MOD_JK_CONF}/workers.properties.${LONG_DATE}"
                    mv ${MOD_JK_CONF}/workers.properties ${MOD_JK_CONF}/workers.properties.${LONG_DATE}
                fi
            fi
            log "Copying workers.properties to ${MOD_JK_CONF}/"
            cp ${SCRIPT_DIR}/workers.properties ${MOD_JK_CONF}/
            
        
        
            # be sure mod_proxy and mod_rewrite are enabled
            log "Refreshing Proxy"
            
            a2dismod proxy_ajp
            a2dismod proxy_http
            a2dismod proxy
            
            a2enmod proxy
            a2enmod proxy_http
            a2enmod proxy_ajp
            
            ## disable and then re-enable mod rewrite  to pick up changes
            log "Refreshing Rewrite"
            a2dismod rewrite
            a2enmod rewrite
        
            # Turn on the ssl module
            log "Refreshing Mod SSL"
            a2dismod ssl
            a2enmod ssl
            
            ## disable and then re-enable mod jk to pick up changes
            log "Refreshing Mod JK"
            a2dismod jk
            a2enmod jk
            
            
            ## disable the default apache site, which gets in the way of the other sites
            a2dissite 000-default
        
        else
            log "Upgrading the package. No new configuration of apache needed."
        fi
            ## copy in site configuration files
        for SITE in ${SITES}
        do
            if [ -e ${APACHE_CONF}/sites-available/${SITE} ]
            then 
              SITE_DIFF=$(diff ${SCRIPT_DIR}/${SITE} ${APACHE_CONF}/sites-available/${SITE})
              if [ "${SITE_DIFF}" != "" ]
              then
                log "Backing up ${APACHE_CONF}/sites-available/${SITE} to ${APACHE_CONF}/sites-available/${SITE}.${LONG_DATE}"
                mv ${APACHE_CONF}/sites-available/${SITE} ${APACHE_CONF}/sites-available/${SITE}.${LONG_DATE}
              fi
            fi
            log "Copying ${SITE} site file to ${APACHE_CONF}/sites-available/"
            cp ${SCRIPT_DIR}/${SITE} ${APACHE_CONF}/sites-available/
            ## replace the token HOSTNAME in the site file to a hostname beginning with cn in the /etc/hosts file
            # HOSTNAME=$(perl -nle 'if (/^([\d\.]+)\s+(cn[^\s]+)\s*/) {$hostname= $2;} END{print $hostname}' /etc/hosts)
            
            ## replace the token HOSTNAME in the site file to a hostname as found by issuing a hostname -f
            
            if [ "$HOSTNAME" != "" ]
            then
              sed -i.bak  's/SERVER_NAME/'${HOSTNAME}'/' ${APACHE_CONF}/sites-available/${SITE}
            else
              log "HOSTNAME can not be set in ${APACHE_CONF}/sites-available/${SITE}"
            fi
            
            # Set the server side SSL CA bundle
            if [ "${CONTEXT}" == "PRODUCTION" ]; then
                sed -i.bak  's/INTERMEDIATE_BUNDLE/'${PROD_INTERMEDIATE_BUNDLE}'/' ${APACHE_CONF}/sites-available/${SITE}
            else
                sed -i.bak  's/INTERMEDIATE_BUNDLE/'${TESTING_INTERMEDIATE_BUNDLE}'/' ${APACHE_CONF}/sites-available/${SITE}
            fi
            
            # Set the client side SSL CA chain file            
            db_get dataone-cn-os-core/cn.dataone.ca.filename
            DATAONE_CA_FILENAME=${RET}
            sed -i.bak  's/D1_CHAIN_FILE/'${DATAONE_CA_FILENAME}'/' ${APACHE_CONF}/sites-available/${SITE}
            
            # Set the client side SSL certificate file            
            sed -i.bak  's/PUBLIC_SERVER_CERT/'${PUBLIC_SERVER_CERT}'/' ${APACHE_CONF}/sites-available/${SITE}
            
            # Set the client side SSL private key file
            db_get dataone-cn-os-core/cn.server.privatekey.filepath
            D1_PRIVATEKEY_FILE=${RET}
            D1_PRIVATEKEY_FILE=$(basename ${D1_PRIVATEKEY_FILE})        
            sed -i.bak  's/D1_PRIVATEKEY_FILE/'${D1_PRIVATEKEY_FILE}'/' ${APACHE_CONF}/sites-available/${SITE}
            
           ## enable ${SITE} site
           log "Enabling ${SITE} site"
           a2dissite ${SITE}
           a2ensite ${SITE}
        
        done
        ## Start Apache
        /etc/init.d/apache2 start
        
        ## Stop tomcat
        log "Stopping Tomcat"
        /etc/init.d/${TOMCAT} stop
        
        # check if this is a new install
        if [[ $(dpkg -s dataone-cn-os-core | grep Status | cut -d" " -f4) != "installed" ]]; then
        
            # determine if the tomcat init script has a sufficient heap size
            # XXX the below configuration needs to be altered per environment
            
            if [ -e /etc/init.d/tomcat6 ]; then
                CONTAINS_XMX_OPTS=$(egrep 'JAVA_OPTS\=.+\-Xmx' /etc/init.d/tomcat6)
                if [ "${CONTAINS_XMX_OPTS}" == "" ]
                then
                    log "THERE WAS AN ERROR /etc/init.d/tomcat NO LONGER HAS -Xmx DEFINED"
                    ## -Xmx is not set, that is bad, the tomcat installation must
                    ## have change significantly. We must manually add it to the JAVA_OPTS LINE
                    ## and then change this script to handle the exact line to add it to
                    
                else 
                    CONTAINS_MAXPERMSIZE_OPTS=$(egrep 'JAVA_OPTS\=.+\-XX\:MaxPermSize' /etc/init.d/tomcat6)
                    if [ "${CONTAINS_MAXPERMSIZE_OPTS}" == "" ]
                    then
                        ## THE MAIN PROBLEM WITH THIS APPROACH CURRENTLY IS SUPPORTING THE DIFFERENT ENVIRONEMENTS
                        ## developer VMs will not be able to support this amount of heap space
                        ## in fact our development environment probably can't
                        sed -i.bak --regexp-extended 's/(JAVA_OPTS\=)"([^"]+\-Xmx)[0-9]+([^"]*)"/\1"\28192\3 -Xms1024M -XX:MaxPermSize=512M"/;' /etc/init.d/tomcat6
                        rm /etc/init.d/tomcat6.bak
                    fi
                fi
                CONTAINS_ULIMIT_SETTINGS=$(egrep 'ulimit.+\-Hn' /etc/init.d/tomcat6)
                if [ "${CONTAINS_ULIMIT_SETTINGS}" == "" ]
                then
                    sed -i.bak --regexp-extended 's/^(\#\!\/bin\/sh.*$)/\1\n  ulimit -Hn 16384\n  ulimit -Sn 16384\n/;' /etc/init.d/tomcat6
                    rm /etc/init.d/tomcat6.bak
                fi
            fi
            
            if [ -e /etc/default/tomcat6 ]; then
                CONTAINS_USEPARALLEL_OPTS=$(egrep 'JAVA_OPTS\=.+\-XX\:\+UseParallelGC' /etc/default/tomcat6)
                CONTAINS_CONCMARKSWEEP_OPTS=$(egrep '^\#?JAVA_OPTS\=".\{JAVA_OPTS\}.+\-XX\:\+UseConcMarkSweepGC"' /etc/default/tomcat6)
                if [ "${CONTAINS_CONCMARKSWEEP_OPTS}" == "" ]; then
                    if [ "${CONTAINS_USEPARALLEL_OPTS}" == "" ]; then
                        echo "JAVA_OPTS=\"\${JAVA_OPTS} -XX:+UseParallelGC\"" >> /etc/default/tomcat6
                    fi
                else 
                    if [ "${CONTAINS_USEPARALLEL_OPTS}" == "" ]; then
                        ## THE MAIN PROBLEM WITH THIS APPROACH CURRENTLY IS SUPPORTING THE DIFFERENT ENVIRONEMENTS
                        ## developer VMs will not be able to support this amount of heap space
                        ## in fact our development environment probably can't
                        sed -i.bak --regexp-extended 's/^\#?JAVA_OPTS=\".\{JAVA_OPTS\}.+\-XX\:\+UseConcMarkSweepGC\"/JAVA_OPTS="\$\{JAVA_OPTS\} \-XX\:\+UseParallelGC"/;' /etc/default/tomcat6
                        rm /etc/default/tomcat6.bak
                    fi
                fi
            fi
            ## copy in jk.conf file
            if [ -e ${TOMCAT_HOME}/conf/server.xml ]; then 
              JK_CONF_DIFF=$(diff ${SCRIPT_DIR}/server.xml ${TOMCAT_HOME}/conf/server.xml)
              if [ "${JK_CONF_DIFF}" != "" ]; then
                log "Backing up ${TOMCAT_HOME}/conf/server.xml to ${TOMCAT_HOME}/conf/server.xml.${LONG_DATE}"
                mv ${TOMCAT_HOME}/conf/server.xml ${TOMCAT_HOME}/conf/server.xml.${LONG_DATE}
              fi
            fi
            log "Copying server.xml to ${TOMCAT_HOME}/conf/"
            cp ${SCRIPT_DIR}/server.xml ${TOMCAT_HOME}/conf/
            
            
            # add slash-handling properties to catalina.properties file
            # (tomcat doesn't support include, so need to add it to the main file)
            if [ -e ${TOMCAT_HOME}/conf/catalina.properties ]; then
                CONTAINS_ENCODED_SLASH=$(grep 'ALLOW_ENCODED_SLASH' ${TOMCAT_HOME}/conf/catalina.properties)
                if [ "$CONTAINS_ENCODED_SLASH" == "" ]; then
                    
                    cp ${TOMCAT_HOME}/conf/catalina.properties ${TOMCAT_HOME}/conf/catalina.properties.${LONG_DATE}
                    log Appending slash-handling Java system properties to  ${TOMCAT_HOME}/conf/catalina.properties
                    echo >> ${TOMCAT_HOME}/conf/catalina.properties
                    echo \# Dataone configuration for handling encoded slash and backslashes >> ${TOMCAT_HOME}/conf/catalina.properties
                    echo org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true >> ${TOMCAT_HOME}/conf/catalina.properties
                    echo org.apache.catalina.connector.CoyoteAdapter.ALLOW_BACKSLASH=true >> ${TOMCAT_HOME}/conf/catalina.properties
                fi
            fi
            
            chown -R ${TOMCAT_USER}:${TOMCAT_USER} /etc/tomcat6
            chown -R ${TOMCAT_USER}:${TOMCAT_USER} /var/lib/tomcat6
            chown -R ${TOMCAT_USER}:${TOMCAT_USER} /var/log/tomcat6
            chown -R ${TOMCAT_USER}:${TOMCAT_USER} /var/cache/tomcat6
            chown -R ${TOMCAT_USER}:${TOMCAT_USER} /usr/share/tomcat6
        
        else
            log "Upgrading the package. No configuration of public CA store."
        fi
        
        
        ###############################################################################
        # Configure OpenLDAP
        ###############################################################################
        # Only populate LDAP on first run, otherwise migrate
        log "Configuring OpenLDAP"
        
        ## place schema extension
        db_get dataone-cn-os-core/cn.openldap.populated
        POPULATED=${RET}
        db_get dataone-cn-os-core/cn.openldap.firstcn
        FIRSTCN=${RET}
        

            
        if [ "${POPULATED}" == "false" ]; then
			log "Populating the LDAP database for the first time"
			log "Adding non dataone schema specific entries"
			sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/cosine.ldif
			sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/nis.ldif
			sudo ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/inetorgperson.ldif
			
            if [ "${FIRSTCN}" == "true" ]; then
            	log "This is the first CN to be installed in the environment"
                log "Adding dataone schema specific entries"
                sudo ldapadd -Y EXTERNAL -H ldapi:/// -f ${SCRIPT_DIR}/ldap/backendDBConfig.ldif
                sudo ldapadd -Y EXTERNAL -H ldapi:/// -f ${SCRIPT_DIR}/ldap/org.ldif
                sudo ldapadd -Y EXTERNAL -H ldapi:/// -f ${SCRIPT_DIR}/ldap/dataone.ldif
                sudo ldapadd -Y EXTERNAL -H ldapi:/// -f ${SCRIPT_DIR}/ldap/cilogon.ldif
            else
            	log "This is not the first CN to be installed in the environment."
                
            fi
        else
            log "LDAP database has already been populated."
        fi
        log "Checking LDAP migration."
        if [ -e ${LDAP_CONF}/schema/dataone.schema ]; then 
            SCHEMA_DIFF=$(diff ${SCRIPT_DIR}/ldap/dataone.schema ${LDAP_CONF}/schema/dataone.schema)
            if [ "${SCHEMA_DIFF}" != "" ]; then
                log "Schema changing: Run the pre migration script"
                ${SCRIPT_DIR}/ldap/prepareMigrateLdap.pl
                log "Backing up ${LDAP_CONF}/schema/dataone.schema to ${LDAP_CONF}/schema/dataone.schema.${LONG_DATE}"
                mv ${LDAP_CONF}/schema/dataone.schema ${LDAP_CONF}/schema/dataone.schema.${LONG_DATE}
            fi
        fi
            
        log "Copying dataone.schema to ${LDAP_CONF}/schema/"
        cp ${SCRIPT_DIR}/ldap/dataone.schema ${LDAP_CONF}/schema/
        chown -R ${LDAP_USER}.${LDAP_USER} ${LDAP_CONF}/schema/dataone.schema 
        
        ## place slapd.conf template
        if [ -e ${LDAP_CONF}/slapd.conf ]; then 
            SLAPD_DIFF=$(diff ${SCRIPT_DIR}/ldap/slapd.conf ${LDAP_CONF}/slapd.conf)
            if [ "${SLAPD_DIFF}" != "" ]; then
                log "Backing up ${LDAP_CONF}/slapd.conf to ${LDAP_CONF}/slapd.conf.${LONG_DATE}"
                mv ${LDAP_CONF}/slapd.conf ${LDAP_CONF}/slapd.conf.${LONG_DATE}
            fi
        fi
        log "Copying slapd.conf to ${LDAP_CONF}/"
        cp ${SCRIPT_DIR}/ldap/slapd.conf ${LDAP_CONF}/
        
        ## place ldap.conf template
        if [ -e ${LDAP_CONF}/ldap.conf ]; then 
            LDAP_DIFF=$(diff ${SCRIPT_DIR}/ldap/ldap.conf ${LDAP_CONF}/ldap.conf)
            if [ "${LDAP_DIFF}" != "" ]; then
                log "Backing up ${LDAP_CONF}/ldap.conf to ${LDAP_CONF}/ldap.conf.${LONG_DATE}"
                mv ${LDAP_CONF}/ldap.conf ${LDAP_CONF}/ldap.conf.${LONG_DATE}
            fi
        fi
        log "Copying ldap.conf to ${LDAP_CONF}/"
        cp ${SCRIPT_DIR}/ldap/ldap.conf ${LDAP_CONF}/
        
        # Fetch the DataONE CA
        db_get dataone-cn-os-core/cn.dataone.ca.filename
        DATAONE_CA_FILENAME=${RET}
        DATAONE_CA_FILENAME="${SSL_CERT_DIR}/${DATAONE_CA_FILENAME}"
        DATAONE_CA_FILENAME=${DATAONE_CA_FILENAME//\//\\\/}
            
        ## Configure the ldap.conf file with correct value for the CA cert
        if [ -e ${LDAP_CONF}/ldap.conf ]; then
            sed -i.bak "s/^\(TLS_CACERT *\).*/\1           ${DATAONE_CA_FILENAME}/" ${LDAP_CONF}/ldap.conf
        fi    
        db_get dataone-cn-os-core/cn.openldap.password
        LDAP_PASS=${RET}
        ## Configure the slapd.conf file with correct values
        if [ -e ${LDAP_CONF}/slapd.conf ]; then
            # Fetch the ldap rootpw from the debconf database

            sed -i.bak "s/^\(rootpw *\).*/\1           ${LDAP_PASS}/" ${LDAP_CONF}/slapd.conf
            
            # Fetch the replicaiton certificate location
            db_get dataone-cn-os-core/cn.replication.certificate.filename
            LDAP_CERTIFICATE=${RET}
            LDAP_CERTIFICATE=${LDAP_CERTIFICATE//\//\\\/}
            sed -i.bak "s/^\(TLSCertificateFile *\).*/\1           ${LDAP_CERTIFICATE}/" ${LDAP_CONF}/slapd.conf
            
            # make sure we have the correct ownership
            chown ${TOMCAT_USER}.ssl-cert ${LDAP_CERTIFICATE}
            
            # Fetch the replication private key location
            db_get dataone-cn-os-core/cn.replication.privatekey.filename
            LDAP_PRIVATEKEY=${RET}
            LDAP_PRIVATEKEY=${LDAP_PRIVATEKEY//\//\\\/}            
            sed -i.bak "s/^\(TLSCertificateKeyFile *\).*/\1           ${LDAP_PRIVATEKEY}/" ${LDAP_CONF}/slapd.conf
            
            # Set the DataONE CA
            sed -i.bak "s/^\(TLSCACertificateFile *\).*/\1           ${DATAONE_CA_FILENAME}/" ${LDAP_CONF}/slapd.conf
            
            # make sure we have the correct ownership for the key
            chown ${TOMCAT_USER}.ssl-cert ${LDAP_PRIVATEKEY}
            
            # Allow us to use non-standard cert/key locations for slapd
            aa-complain /etc/apparmor.d/usr.sbin.slapd
            # TODO: instead of disabling apparmor, add exceptions to the config
            # file located here: /etc/apparmor.d/usr.sbin.slapd
            
            db_get dataone-cn-os-core/cn.nodeid
            NODEID=${RET}
            # Set up sychronization across the listed servers
            let count=0
            SYNC_SETTINGS="\n"; # synchronization definitions and settings
            db_get dataone-cn-os-core/cn.openldap.synchronized
            if [ "${RET}" == "true" ]; then
                db_get dataone-cn-os-core/cn.hostnamelist
                ADDRESSES=${RET}
                db_get dataone-cn-os-core/cn.nodeids
                NODEIDS=( ${RET} ) # node ids array
                
                for address in ${ADDRESSES}; 
                    do
                        # only create a replica entry for servers others than this server
                        CURRENTNODEID=${NODEIDS[$count]}
                        log "Node id in the list is ${CURRENTNODEID}"
                        if [ "${NODEID}" == "${CURRENTNODEID}" ]; then
                            let count=${count}+1
                            continue
                        else
                            let count=${count}+1
                            log "Adding LDAP sync config for ${address}"
                            SYNC_SETTINGS="${SYNC_SETTINGS}\nsyncRepl rid=${count}"
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\tprovider=ldap:\/\/${address}:389"
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\turi=ldap:\/\/${address}:389"
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\tbinddn=\"cn=admin,dc=dataone,dc=org\""
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\tbindmethod=simple"
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\tcredentials=${LDAP_PASS}"
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\tsearchbase=\"dc=org\""
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\ttype=refreshAndPersist"
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\tstarttls=yes"   
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\ttls_cert=${LDAP_CERTIFICATE}"                            
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\ttls_key=${LDAP_PRIVATEKEY}"
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\ttls_cacert=${DATAONE_CA_FILENAME}"                            
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\tinterval=00:00:00:05"
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\tretry=\"5 5 300 5\""
                            SYNC_SETTINGS="${SYNC_SETTINGS}\n\ttimeout=1"
                        fi
                    done
                    
                SYNC_SETTINGS="${SYNC_SETTINGS}\n\nmirrormode on"
                SYNC_SETTINGS="${SYNC_SETTINGS}\noverlay syncprov"
                SYNC_SETTINGS="${SYNC_SETTINGS}\nsyncprov-checkpoint 100 10"
                SYNC_SETTINGS="${SYNC_SETTINGS}\nsyncprov-sessionlog 100\n"
                
                # Fetch the ldap serverID from the debconf database
                db_get dataone-cn-os-core/cn.openldap.serverID
                SYNC_CONF="${RET}${SYNC_SETTINGS}"
                log ${SYNC_CONF}
                sed -i.bak "s/^\(serverID *\).*/\1${SYNC_CONF}/" ${LDAP_CONF}/slapd.conf
            
            else
                # Fetch the ldap serverID from the debconf database
                db_get dataone-cn-os-core/cn.openldap.serverID
                log "No LDAP replication selected. Setting serverID only."
                sed -i.bak "s/^\(serverID *\).*/\1           ${RET}/" ${LDAP_CONF}/slapd.conf
                
            fi
            
        else
            log "Couldn't set LDAP configuration correctly. Configure ${LDAP_CONF}/slapd.conf manually."
        fi
        #  CN Service and D1-Processing needs the ldap password in a properties
        # file so that they may connect to ldap to retrieve information
        cp ${SCRIPT_DIR}/ldapService.properties ${D1_CONF}/ldapService.properties
        sed -i.bak "s/PASSWORD/${LDAP_PASS}/" ${D1_CONF}/ldapService.properties
        chown ${TOMCAT_USER}.${TOMCAT_USER} ${D1_CONF}/ldapService.properties
        chmod -R 640 ${D1_CONF}/ldapService.properties
        
        # Always clear the cached LDAP password
        db_set dataone-cn-os-core/cn.openldap.password "" # clear the cached pw
        
        ## set permissions 
        chown -R ${LDAP_USER}.${LDAP_USER} ${LDAP_CONF}/slapd.conf
        chown -R ${LDAP_USER}.${LDAP_USER} ${LDAP_CONF}/ldap.conf
        
        # add to ssl-cert group so it can read private keys
        adduser ${LDAP_USER} ssl-cert
        
        # try to add the dc=org before going through the rest of the routine
        # the worst that could happen is a denied message
        
        
        ## stop the default service
        log "Stopping slapd"
        /etc/init.d/slapd stop
        
        ## start, using slapd.conf file
        log "Generating ldif config using: ${LDAP_CONF}/slapd.conf"
        #slapd -h 'ldap:/// ldapi:///' -g ${LDAP_USER} -u ${LDAP_USER} -f /etc/ldap/slapd.conf
        

        
        rm -rf ${LDAP_CONF}/slapd.d/*
        slaptest -f ${LDAP_CONF}/slapd.conf -F ${LDAP_CONF}/slapd.d
        if [ -e ${LDAP_CONF}/slapd.d/cn=config/olcDatabase={1}hdb.ldif ]; then
        	# NOTE: I see this being broken across a linebreak now with version 2.4.21 (BRL 20120731)
        	# http://www.openldap.org/its/index.cgi/Software%20Bugs?id=6465
        	# (if i read the bug report correctly it is fixed starting at 2.4.24)
        	# the string uri="" finds its way into olcDatabase={1}hdb.ldif file 
        	# into the olcSyncrepl directive and breaks OpenLDAP
        	# the string uri="" may be found at the beginning of a line, end of a line,
        	# middle of the line, or breaking across lines.
        	# if it breaks across lines, we need to preserve the newline,
        	# and ensure the line afterwards starts with a space.
        	# otherwise remove the string, guaranteeing only a single space separates
        	# previous setting string to the next setting string 
        	
        	perl -pi.bak -e 'BEGIN{undef $/;} s/\hu(\s*)r(\s*)i(\s*)\=(\s*)\"(\s*)\"(\n?)/$1$2$3$4$5$6/mg' ${LDAP_CONF}/slapd.d/cn=config/olcDatabase={1}hdb.ldif
        	
            rm ${LDAP_CONF}/slapd.d/cn=config/olcDatabase={1}hdb.ldif.bak
        fi
        chown -R ${LDAP_USER}.${LDAP_USER} /etc/ldap/slapd.d
        ## make sure we own the storage folder
        chown -R ${LDAP_USER}.${LDAP_USER} /var/lib/ldap 
        log "Starting slapd"
        /etc/init.d/slapd start
        sleep 5 # openldap doesn't seem to come up quickly enough
        
        # populate or migrate the LDAP database with the LDIF file for the chosen context
        
        if [ "${POPULATED}" == "false" ]; then
            if [ "${FIRSTCN}" == "true" ]; then
                log "Adding all dataone schema specific entries"
                LDAPADD_RESULT="$(ldapadd -v -c -D cn=admin,dc=dataone,dc=org -w ${LDAP_PASS} -H ldap://localhost:389 -x -f ${SCRIPT_DIR}/ldap/${CONTEXT,,}NodeList.ldif)"
                log ${LDAPADD_RESULT}
                # Update the debconf database
                db_set dataone-cn-os-core/cn.openldap.populated true
                db_fset dataone-cn-os-core/cn.openldap.populated seen true
            else
                log "Not the first CN in the environment. Skipping LDAP population."
            fi
            
        else
            log "Migrating all dataone schema specific entries"
            ${SCRIPT_DIR}/ldap/migrateLdap.pl
        fi
        ## list the entries
        log "Listing LDAP entries for: dc=dataone,dc=org"
        LDAPSEARCH_RESULT=$(ldapsearch -LLL -D cn=admin,dc=dataone,dc=org -w ${LDAP_PASS} -H ldap://localhost:389 -x -b 'dc=dataone,dc=org')
        log ${LDAPSEARCH_RESULT}
        ## done with OpenLDAP
        log "LDAP configuration complete"
        
        log "ETC configuration"
        
        sleep 5
        
        ###############################################################################
        # Configure BouncyCastle for Java Security (before starting tomcat)
        ###############################################################################
        
        CONTAINS_BOUNCYCASTLE=$(grep -P '=org\.bouncycastle\.jce\.provider\.BouncyCastleProvider' ${JAVA_SECURITY})
        
        if [ "${CONTAINS_BOUNCYCASTLE}" == "" ]; then
        
            cp ${SOURCE_DIR}/bcprov-jdk16-1.46.jar ${JAVA_SECURITY_EXT}
            cp ${SOURCE_DIR}/bcmail-jdk16-1.46.jar ${JAVA_SECURITY_EXT}
        
            SECURITY_PROVIDERS=`grep -P 'security\.provider\.\d' ${JAVA_SECURITY} | awk 'BEGIN { FS = "[.=]" } ; { print $3 }'`
            MAXSECURITY_PROVIDERS=(
            $(for i in ${SECURITY_PROVIDERS[*]}
                do
                    echo "$i"
                    done | sort -nr )
                )
            MAX_PROVIDER_ORDER=${MAXSECURITY_PROVIDERS[0]}
            BOUNCY_CASTLE_ORDER=`expr ${MAX_PROVIDER_ORDER} + 1`
        
            BOUNCY_CASTLE_PROVIDER="\nsecurity.provider."${BOUNCY_CASTLE_ORDER}"=org.bouncycastle.jce.provider.BouncyCastleProvider"
        
            sed -i.bak --regexp-extended "s/(^security\.provider\.${MAX_PROVIDER_ORDER}.+$)/\1${BOUNCY_CASTLE_PROVIDER}/;" ${JAVA_SECURITY}
        
        else
            echo "bouncycastle security provider was previously installed "
        fi
                
        ###############################################################################
        # Start Tomcat
        ###############################################################################
        log "starting Tomcat server"
        
        /etc/init.d/${TOMCAT} start
        
        ###############################################################################
        # Configure check_mk
        ###############################################################################
        chown -R root:root /usr/lib/check_mk_agent
        chmod -R 755 /usr/lib/check_mk_agent
        ######################################
        db_set dataone-cn-os-core/cn.installed true
        db_fset dataone-cn-os-core/cn.installed seen true
        
        log "Configuration of dataone-cn-os-core complete."
    else
        log "Already configured, just setting pre-seeded node properties."
        
        NODE_PROPS="$D1_CONF/node.properties"
        
        # set the environment context in node.properties
        CONTEXT_LABEL="cn.context.label"
        db_get dataone-cn-os-core/cn.context.label
        CONTEXT=${RET}
        if [ -e ${NODE_PROPS} ]; then
            sed -i.bak "s/\(${CONTEXT_LABEL} *=\).*/\1${CONTEXT}/" ${NODE_PROPS}
        else
            log "The file ${NODE_PROPS} must be in place to proceed."
            exit 1;
        fi
        
        # set the IP address list in node.properties
        IPLIST_LABEL="cn.iplist"        
        if [ -e ${NODE_PROPS} ]; then
            # Fetch the context's ip list from the debconf database
            IPLIST="127.0.0.1"
            # if the cn.openldap.synchronized is false then the 
            # CN will be running in standalone mode
            # no synchronization, no other hazelcast cluster members
            
            db_get dataone-cn-os-core/cn.openldap.synchronized
            SYNCHRONIZED=${RET}
            
            if [[ ${SYNCHRONIZED} != *false* ]];then
                db_get dataone-cn-os-core/${IPLIST_LABEL}
                IPLIST=${RET}
            fi
            sed -i.bak "s/\(${IPLIST_LABEL} *=\).*/\1${IPLIST}/" ${NODE_PROPS}
        else
            log "Couldn't set the IP list correctly."
        fi
        
        
        # set the environment node id list in node.properties
        NODEIDS_LABEL="cn.nodeIds"        
        if [ -e ${NODE_PROPS} ]; then
            # Fetch the context's node id list from the debconf database
            db_get dataone-cn-os-core/cn.nodeids
            sed -i.bak "s/\(${NODEIDS_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
        else
            log "Couldn't set the node id list correctly."
        fi
        
        # set the environment node id in node.properties
        NODEID_LABEL="cn.nodeId"        
        if [ -e ${NODE_PROPS} ]; then
            # Fetch the context's node id from the debconf database
            db_get dataone-cn-os-core/cn.nodeid
            sed -i.bak "s/\(${NODEID_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
        else
            log "Couldn't set the node id correctly."
        fi
     
        # set the environment round robin id in node.properties
        NODE_RR_LABEL="cn.router.nodeId"        
        if [ -e ${NODE_PROPS} ]; then
            # Fetch the context's node round robin id from the debconf database
            db_get dataone-cn-os-core/cn.router.nodeId
            sed -i.bak "s/\(${NODE_RR_LABEL} *=\).*/\1${RET}/" ${NODE_PROPS}
        else
            log "Couldn't set the round robin node id correctly."
        fi
        
        # set the environment round robin hostname in node.properties
        NODE_RR_HOSTNAME="cn.router.hostname"        
        if [ -e ${NODE_PROPS} ]; then
            # Fetch the context's node round robin hostname from the debconf database
            db_get dataone-cn-os-core/cn.router.hostname
            sed -i.bak "s/\(${NODE_RR_HOSTNAME} *=\).*/\1${RET}/" ${NODE_PROPS}
        else
            log "Couldn't set the round robin hostname correctly."
        fi
        
    fi
    
    ### the following lines until the db_stop should
    ### be placed in a separate package that has to do with
    ### CN specific tools
    
    cp ${SOURCE_DIR}/d1_cn_approve_node.jar /usr/share/java
    chmod 700 /usr/share/java/d1_cn_approve_node.jar
    chmod 700 /usr/local/bin/dataone-approve-node
    
	# Fetch the replicaiton certificate location
	db_get dataone-cn-os-core/cn.replication.certificate.filename
	LDAP_CERTIFICATE=${RET}
	LDAP_CERTIFICATE=${LDAP_CERTIFICATE//\//\\\/}
	
	# Fetch the replication private key location
	db_get dataone-cn-os-core/cn.replication.privatekey.filename
	LDAP_PRIVATEKEY=${RET}
	LDAP_PRIVATEKEY=${LDAP_PRIVATEKEY//\//\\\/}
	
	# copy the perl scripts to /usr/local/bin
	cp ${SCRIPT_DIR}/ldap/ldapDeleteNode.pl /usr/local/bin/ldapDeleteNode.pl
	
	#substitute the cert/key in the scripts

	sed -i.bak  's/REPLICATION_CERTIFICATE/'${LDAP_CERTIFICATE}'/' /usr/local/bin/ldapDeleteNode.pl
	sed -i.bak  's/REPLICATION_KEY/'${LDAP_PRIVATEKEY}'/' /usr/local/bin/ldapDeleteNode.pl
	rm /usr/local/bin/ldapDeleteNode.pl.bak
	
	# root should be owner, make certain only root has permission to execute
	chmod 700 /usr/local/bin/ldapDeleteNode.pl
	db_stop
    ;;
esac
exit 0
